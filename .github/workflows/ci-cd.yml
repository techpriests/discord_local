name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # Only run on main
  pull_request:
    branches: [ main ]  # Only run on PRs to main

jobs:
  ci:
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Run tests
      run: poetry run pytest

  cd:
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install docker git -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
          fi

          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Deploy application
          cd ~/discord_local
          git pull origin main
          
          # Set Git environment variables
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          
          # Use environment variables in docker-compose
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > .env
          echo "STEAM_API_KEY=${{ secrets.STEAM_API_KEY }}" >> .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
          echo "GIT_COMMIT=$GIT_COMMIT" >> .env
          echo "GIT_BRANCH=$GIT_BRANCH" >> .env
          
          # Stop the current containers
          docker-compose down
          
          # Clean up old resources related to our bot only
          # Remove old bot images, keeping the ones from last 24h
          docker images "discord_local_bot" -q | xargs -r docker rmi 2>/dev/null || true
          # Remove dangling images created by our bot's builds
          docker images -f "dangling=true" -f "label=com.docker.compose.project=discord_local" -q | xargs -r docker rmi 2>/dev/null || true
          # Remove stopped containers related to our bot
          docker ps -a -f "name=discord_local" -f "status=exited" -q | xargs -r docker rm 2>/dev/null || true
          # Remove unused networks created by our bot
          docker network ls -f "name=discord_local" -f "dangling=true" -q | xargs -r docker network rm 2>/dev/null || true
          
          # Build and start new containers
          docker-compose build
          docker-compose up -d
          
          # After successful deployment, remove old images
          # This removes images that aren't used by any container
          docker image prune -a --force --filter "until=24h" 