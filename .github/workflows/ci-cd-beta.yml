name: "CI/CD Pipeline (beta)"

on:
  push:
    branches: [ beta ]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: "Install dependencies (mirror server: skip ML group)"
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --without ml

    - name: Run tests
      run: poetry run pytest

  cd-beta:
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/beta'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy beta to EC2 (separate directory and containers)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install docker git -y
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
          fi

          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Prepare beta deployment directory
          mkdir -p ~/discord_beta
          cd ~/discord_beta

          # Clone repository if not already present (supports private repos via token)
          if [ ! -d .git ]; then
            echo "Cloning repository into ~/discord_beta"
            git clone "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" . || {
              echo "Failed to clone repository. Ensure the server can access your repo or pre-clone it into ~/discord_beta";
              exit 1;
            }
          fi

          # Checkout beta branch
          git fetch --all --tags
          if git show-ref --verify --quiet refs/heads/beta; then
            git checkout beta
          else
            git checkout -B beta origin/beta || git checkout beta
          fi
          git pull origin beta || true

          # Mark CI/CD deployment (used by hot-reload to avoid conflicts)
          echo "CI/CD beta deployment started at $(date)" > ci_cd.lock

          # Set Git metadata
          export GIT_COMMIT=$(git rev-parse --short HEAD)
          export GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

          # Create beta .env with secrets
          # If DISCORD_TOKEN_BETA is not set, fall back to main DISCORD_TOKEN
          if [ -n "${{ secrets.DISCORD_TOKEN_BETA }}" ]; then
            echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN_BETA }}" > .env
          else
            echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > .env
          fi
          if [ -n "${{ secrets.STEAM_API_KEY_BETA }}" ]; then
            echo "STEAM_API_KEY=${{ secrets.STEAM_API_KEY_BETA }}" >> .env
          else
            echo "STEAM_API_KEY=${{ secrets.STEAM_API_KEY }}" >> .env
          fi
          if [ -n "${{ secrets.CL_API_KEY_BETA }}" ]; then
            echo "CL_API_KEY=${{ secrets.CL_API_KEY_BETA }}" >> .env
          else
            echo "CL_API_KEY=${{ secrets.CL_API_KEY }}" >> .env
          fi
          echo "GIT_COMMIT=$GIT_COMMIT" >> .env
          echo "GIT_BRANCH=$GIT_BRANCH" >> .env

          # Build and run beta containers with a separate compose file
          # This ensures different container and network names to avoid conflicts
          docker-compose -f docker-compose.beta.yml down || true
          docker-compose -f docker-compose.beta.yml build
          docker-compose -f docker-compose.beta.yml up -d

          # Cleanup
          rm -f ci_cd.lock
          docker image prune -a --force --filter "until=24h" || true
